.data
    emptyErrorMessage:	.asciiz "Input is empty."
    lengthErrorMessage: .asciiz "Input is too long."
    baseErrorMessage:   .asciiz "Invalid base-34 number."
    userInput:		.space 60
.text

    main:

	li $v0, 8   
	la $a0, userInput
	li $a1, 60
	syscall
	add $t0, $0, 0
	add $t1, $0, 0
	
	la $s2, userInput
	lb $t0,0($t2)
	beq $t0, 10, emptyError
	beq $t1,$0, emptyError

	addi $s0, $0, 32 
	addi $t3, $0, 1
	addi $t4, $0, 0
        addi $t5, $0, 0

        ignoreSpaces:
        lb $t0, 0($t2) 
	addi $t2, $t2, 1 
	addi $t1, $t1, 1
	beq $t0, 32, ignoreSpaces 
	beq $t0, 10, emptyError 
	beq $t0, $0, emptyError 
	
	viewchar:
        lb $t0, 0($t2)
        addi $t2, $t2, 1
        addi $t1, $t1, 1
        beq $t0, 10, restart
        beq $t0, 0, restart
        bne $t0, 32, viewchar

        viewRemaining:
        lb $t0, 0($t2)
        addi $t2, $t2, 1
        addi $t1, $t1, 1
        beq $t0, 10, restart
        beq $t0, 0, restart
	bne $t0, 32, baseError 
	 j viewRemaining

         restart:
         sub $t2, $t2, $t1 #restart the pointer
         la $t1, 0 #restart the counter

         continue:
         lb $t0, 0($t2)
         addi $t2, $t2, 1
         beq $t0, 32, continue
         addi $t2, $t2, -1

          stringLength:
          lb $t0, ($t2)
          addi $t2, $t2, 1
          addi $t1, $t1, 1
          beq $t0, 10, callconversions
          beq $t0, 0, callconversions
          beq $t0, 32, callconversions
          beq $t1, 5, lengthError
          j stringLength

callconversions:
    sub $t2, $t2, $t1 
    addi $sp, $sp, -4
    sw $ra, 0($sp)  
    move $a0, $t2
    li $a1, 4
    li $a2, 1 
    jal DecimalVersion 
    j return
    
    return:
    move $a0, $v0
    li $v0, 1
    syscall
    
    lw $ra, 0($sp) 
    addi $sp, $sp, 4 
    jr $ra

    end:
    move $a0, $t5 
    li $v0, 1 
    syscall
    li $v0, 10 #end program
    syscall

    emptyError:
    la $a0, emptyErrorMessage 
    li $v0, 4 
    syscall
    li $v0, 10 
    syscall

    lengthError:
    la $a0, lengthErrorMessage 
    li $v0, 4 
    syscall

    li $v0, 10 
    syscall

     baseError:
     la $a0, baseErrorMessage 
     li $v0, 4 
     syscall

     li $v0, 10 
     syscall
     jr $ra
DecimalVersion:
    addi $sp, $sp, -8 
    sw $ra, 0($sp)
    sw $s3, 4($sp)
    beq $a1, $0, return_zero
    addi $a1, $a1, -1 
    add $t0, $a0, $a1 
    lb $s3, 0($t0)
         blt $s3, 48, baseError 
     blt $s3, 58, Numbers
     blt $s3, 65, baseError
     blt $s3, 87, Upletters
     blt $s3, 97, baseError
     blt $s3, 118, Lowletters
     blt $s3, 128, baseError
     
     Numbers:
     addi $s4, $s4, -48
     jal More
     
     Upletters:
     addi $s4, $s4, -55
     jal More
     
     Lowletters:
     addi $s4, $s4, -87
     jal More
   
     More:
     mul $s3, $s3, $a2 
     mul $a2, $a2, 32 
     jal DecimalVersion

    
    
     add $v0, $s3, $v0   
      lw $ra, 0($sp)      
      lw $s3, 4($sp)
      addi $sp, $sp, 8
      jr $ra
        
      return_zero:
      li $v0, 0
      lw $ra, 0($sp)
      lw $s3, 4($sp)
      addi $sp, $sp, 8
      jr $ra
      li $v0, 10
      syscall

 

   
